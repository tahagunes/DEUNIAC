// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/27/2021 21:42:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    2018510033_osman_taha_gunes_newBUS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module 2018510033_osman_taha_gunes_newBUS_vlg_sample_tst(
	Clk,
	OP_CODE,
	Q,
	Rd,
	S1S2,
	T2,
	T3,
	sampler_tx
);
input  Clk;
input [3:0] OP_CODE;
input  Q;
input [1:0] Rd;
input [3:0] S1S2;
input  T2;
input  T3;
output sampler_tx;

reg sample;
time current_time;
always @(Clk or OP_CODE or Q or Rd or S1S2 or T2 or T3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module 2018510033_osman_taha_gunes_newBUS_vlg_check_tst (
	ADR_OUT,
	Data,
	INPT_REG,
	MEM_Data,
	OUT_REG,
	OVFLW,
	R0_OUT,
	R1_OUT,
	R2_OUT,
	sampler_rx
);
input [3:0] ADR_OUT;
input [3:0] Data;
input [3:0] INPT_REG;
input [3:0] MEM_Data;
input [3:0] OUT_REG;
input  OVFLW;
input [3:0] R0_OUT;
input [3:0] R1_OUT;
input [3:0] R2_OUT;
input sampler_rx;

reg [3:0] ADR_OUT_expected;
reg [3:0] Data_expected;
reg [3:0] INPT_REG_expected;
reg [3:0] MEM_Data_expected;
reg [3:0] OUT_REG_expected;
reg  OVFLW_expected;
reg [3:0] R0_OUT_expected;
reg [3:0] R1_OUT_expected;
reg [3:0] R2_OUT_expected;

reg [3:0] ADR_OUT_prev;
reg [3:0] Data_prev;
reg [3:0] INPT_REG_prev;
reg [3:0] MEM_Data_prev;
reg [3:0] OUT_REG_prev;
reg  OVFLW_prev;
reg [3:0] R0_OUT_prev;
reg [3:0] R1_OUT_prev;
reg [3:0] R2_OUT_prev;

reg [3:0] ADR_OUT_expected_prev;
reg [3:0] Data_expected_prev;
reg [3:0] INPT_REG_expected_prev;
reg [3:0] MEM_Data_expected_prev;
reg [3:0] OUT_REG_expected_prev;
reg  OVFLW_expected_prev;
reg [3:0] R0_OUT_expected_prev;
reg [3:0] R1_OUT_expected_prev;
reg [3:0] R2_OUT_expected_prev;

reg [3:0] last_ADR_OUT_exp;
reg [3:0] last_Data_exp;
reg [3:0] last_INPT_REG_exp;
reg [3:0] last_MEM_Data_exp;
reg [3:0] last_OUT_REG_exp;
reg  last_OVFLW_exp;
reg [3:0] last_R0_OUT_exp;
reg [3:0] last_R1_OUT_exp;
reg [3:0] last_R2_OUT_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	ADR_OUT_prev = ADR_OUT;
	Data_prev = Data;
	INPT_REG_prev = INPT_REG;
	MEM_Data_prev = MEM_Data;
	OUT_REG_prev = OUT_REG;
	OVFLW_prev = OVFLW;
	R0_OUT_prev = R0_OUT;
	R1_OUT_prev = R1_OUT;
	R2_OUT_prev = R2_OUT;
end

// update expected /o prevs

always @(trigger)
begin
	ADR_OUT_expected_prev = ADR_OUT_expected;
	Data_expected_prev = Data_expected;
	INPT_REG_expected_prev = INPT_REG_expected;
	MEM_Data_expected_prev = MEM_Data_expected;
	OUT_REG_expected_prev = OUT_REG_expected;
	OVFLW_expected_prev = OVFLW_expected;
	R0_OUT_expected_prev = R0_OUT_expected;
	R1_OUT_expected_prev = R1_OUT_expected;
	R2_OUT_expected_prev = R2_OUT_expected;
end


// expected ADR_OUT[ 3 ]
initial
begin
	ADR_OUT_expected[3] = 1'bX;
end 
// expected ADR_OUT[ 2 ]
initial
begin
	ADR_OUT_expected[2] = 1'bX;
end 
// expected ADR_OUT[ 1 ]
initial
begin
	ADR_OUT_expected[1] = 1'bX;
end 
// expected ADR_OUT[ 0 ]
initial
begin
	ADR_OUT_expected[0] = 1'bX;
end 
// expected Data[ 3 ]
initial
begin
	Data_expected[3] = 1'bX;
end 
// expected Data[ 2 ]
initial
begin
	Data_expected[2] = 1'bX;
end 
// expected Data[ 1 ]
initial
begin
	Data_expected[1] = 1'bX;
end 
// expected Data[ 0 ]
initial
begin
	Data_expected[0] = 1'bX;
end 
// expected INPT_REG[ 3 ]
initial
begin
	INPT_REG_expected[3] = 1'bX;
end 
// expected INPT_REG[ 2 ]
initial
begin
	INPT_REG_expected[2] = 1'bX;
end 
// expected INPT_REG[ 1 ]
initial
begin
	INPT_REG_expected[1] = 1'bX;
end 
// expected INPT_REG[ 0 ]
initial
begin
	INPT_REG_expected[0] = 1'bX;
end 
// expected MEM_Data[ 3 ]
initial
begin
	MEM_Data_expected[3] = 1'bX;
end 
// expected MEM_Data[ 2 ]
initial
begin
	MEM_Data_expected[2] = 1'bX;
end 
// expected MEM_Data[ 1 ]
initial
begin
	MEM_Data_expected[1] = 1'bX;
end 
// expected MEM_Data[ 0 ]
initial
begin
	MEM_Data_expected[0] = 1'bX;
end 
// expected OUT_REG[ 3 ]
initial
begin
	OUT_REG_expected[3] = 1'bX;
end 
// expected OUT_REG[ 2 ]
initial
begin
	OUT_REG_expected[2] = 1'bX;
end 
// expected OUT_REG[ 1 ]
initial
begin
	OUT_REG_expected[1] = 1'bX;
end 
// expected OUT_REG[ 0 ]
initial
begin
	OUT_REG_expected[0] = 1'bX;
end 

// expected OVFLW
initial
begin
	OVFLW_expected = 1'bX;
end 
// expected R0_OUT[ 3 ]
initial
begin
	R0_OUT_expected[3] = 1'bX;
end 
// expected R0_OUT[ 2 ]
initial
begin
	R0_OUT_expected[2] = 1'bX;
end 
// expected R0_OUT[ 1 ]
initial
begin
	R0_OUT_expected[1] = 1'bX;
end 
// expected R0_OUT[ 0 ]
initial
begin
	R0_OUT_expected[0] = 1'bX;
end 
// expected R1_OUT[ 3 ]
initial
begin
	R1_OUT_expected[3] = 1'bX;
end 
// expected R1_OUT[ 2 ]
initial
begin
	R1_OUT_expected[2] = 1'bX;
end 
// expected R1_OUT[ 1 ]
initial
begin
	R1_OUT_expected[1] = 1'bX;
end 
// expected R1_OUT[ 0 ]
initial
begin
	R1_OUT_expected[0] = 1'bX;
end 
// expected R2_OUT[ 3 ]
initial
begin
	R2_OUT_expected[3] = 1'bX;
end 
// expected R2_OUT[ 2 ]
initial
begin
	R2_OUT_expected[2] = 1'bX;
end 
// expected R2_OUT[ 1 ]
initial
begin
	R2_OUT_expected[1] = 1'bX;
end 
// expected R2_OUT[ 0 ]
initial
begin
	R2_OUT_expected[0] = 1'bX;
end 
// generate trigger
always @(ADR_OUT_expected or ADR_OUT or Data_expected or Data or INPT_REG_expected or INPT_REG or MEM_Data_expected or MEM_Data or OUT_REG_expected or OUT_REG or OVFLW_expected or OVFLW or R0_OUT_expected or R0_OUT or R1_OUT_expected or R1_OUT or R2_OUT_expected or R2_OUT)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ADR_OUT = %b | expected Data = %b | expected INPT_REG = %b | expected MEM_Data = %b | expected OUT_REG = %b | expected OVFLW = %b | expected R0_OUT = %b | expected R1_OUT = %b | expected R2_OUT = %b | ",ADR_OUT_expected_prev,Data_expected_prev,INPT_REG_expected_prev,MEM_Data_expected_prev,OUT_REG_expected_prev,OVFLW_expected_prev,R0_OUT_expected_prev,R1_OUT_expected_prev,R2_OUT_expected_prev);
	$display("| real ADR_OUT = %b | real Data = %b | real INPT_REG = %b | real MEM_Data = %b | real OUT_REG = %b | real OVFLW = %b | real R0_OUT = %b | real R1_OUT = %b | real R2_OUT = %b | ",ADR_OUT_prev,Data_prev,INPT_REG_prev,MEM_Data_prev,OUT_REG_prev,OVFLW_prev,R0_OUT_prev,R1_OUT_prev,R2_OUT_prev);
`endif
	if (
		( ADR_OUT_expected_prev[0] !== 1'bx ) && ( ADR_OUT_prev[0] !== ADR_OUT_expected_prev[0] )
		&& ((ADR_OUT_expected_prev[0] !== last_ADR_OUT_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADR_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADR_OUT_expected_prev);
		$display ("     Real value = %b", ADR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADR_OUT_exp[0] = ADR_OUT_expected_prev[0];
	end
	if (
		( ADR_OUT_expected_prev[1] !== 1'bx ) && ( ADR_OUT_prev[1] !== ADR_OUT_expected_prev[1] )
		&& ((ADR_OUT_expected_prev[1] !== last_ADR_OUT_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADR_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADR_OUT_expected_prev);
		$display ("     Real value = %b", ADR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADR_OUT_exp[1] = ADR_OUT_expected_prev[1];
	end
	if (
		( ADR_OUT_expected_prev[2] !== 1'bx ) && ( ADR_OUT_prev[2] !== ADR_OUT_expected_prev[2] )
		&& ((ADR_OUT_expected_prev[2] !== last_ADR_OUT_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADR_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADR_OUT_expected_prev);
		$display ("     Real value = %b", ADR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADR_OUT_exp[2] = ADR_OUT_expected_prev[2];
	end
	if (
		( ADR_OUT_expected_prev[3] !== 1'bx ) && ( ADR_OUT_prev[3] !== ADR_OUT_expected_prev[3] )
		&& ((ADR_OUT_expected_prev[3] !== last_ADR_OUT_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ADR_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ADR_OUT_expected_prev);
		$display ("     Real value = %b", ADR_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ADR_OUT_exp[3] = ADR_OUT_expected_prev[3];
	end
	if (
		( Data_expected_prev[0] !== 1'bx ) && ( Data_prev[0] !== Data_expected_prev[0] )
		&& ((Data_expected_prev[0] !== last_Data_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_expected_prev);
		$display ("     Real value = %b", Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_exp[0] = Data_expected_prev[0];
	end
	if (
		( Data_expected_prev[1] !== 1'bx ) && ( Data_prev[1] !== Data_expected_prev[1] )
		&& ((Data_expected_prev[1] !== last_Data_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_expected_prev);
		$display ("     Real value = %b", Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_exp[1] = Data_expected_prev[1];
	end
	if (
		( Data_expected_prev[2] !== 1'bx ) && ( Data_prev[2] !== Data_expected_prev[2] )
		&& ((Data_expected_prev[2] !== last_Data_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_expected_prev);
		$display ("     Real value = %b", Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_exp[2] = Data_expected_prev[2];
	end
	if (
		( Data_expected_prev[3] !== 1'bx ) && ( Data_prev[3] !== Data_expected_prev[3] )
		&& ((Data_expected_prev[3] !== last_Data_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Data_expected_prev);
		$display ("     Real value = %b", Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Data_exp[3] = Data_expected_prev[3];
	end
	if (
		( INPT_REG_expected_prev[0] !== 1'bx ) && ( INPT_REG_prev[0] !== INPT_REG_expected_prev[0] )
		&& ((INPT_REG_expected_prev[0] !== last_INPT_REG_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INPT_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INPT_REG_expected_prev);
		$display ("     Real value = %b", INPT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_INPT_REG_exp[0] = INPT_REG_expected_prev[0];
	end
	if (
		( INPT_REG_expected_prev[1] !== 1'bx ) && ( INPT_REG_prev[1] !== INPT_REG_expected_prev[1] )
		&& ((INPT_REG_expected_prev[1] !== last_INPT_REG_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INPT_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INPT_REG_expected_prev);
		$display ("     Real value = %b", INPT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_INPT_REG_exp[1] = INPT_REG_expected_prev[1];
	end
	if (
		( INPT_REG_expected_prev[2] !== 1'bx ) && ( INPT_REG_prev[2] !== INPT_REG_expected_prev[2] )
		&& ((INPT_REG_expected_prev[2] !== last_INPT_REG_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INPT_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INPT_REG_expected_prev);
		$display ("     Real value = %b", INPT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_INPT_REG_exp[2] = INPT_REG_expected_prev[2];
	end
	if (
		( INPT_REG_expected_prev[3] !== 1'bx ) && ( INPT_REG_prev[3] !== INPT_REG_expected_prev[3] )
		&& ((INPT_REG_expected_prev[3] !== last_INPT_REG_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port INPT_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", INPT_REG_expected_prev);
		$display ("     Real value = %b", INPT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_INPT_REG_exp[3] = INPT_REG_expected_prev[3];
	end
	if (
		( MEM_Data_expected_prev[0] !== 1'bx ) && ( MEM_Data_prev[0] !== MEM_Data_expected_prev[0] )
		&& ((MEM_Data_expected_prev[0] !== last_MEM_Data_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_Data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_Data_expected_prev);
		$display ("     Real value = %b", MEM_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MEM_Data_exp[0] = MEM_Data_expected_prev[0];
	end
	if (
		( MEM_Data_expected_prev[1] !== 1'bx ) && ( MEM_Data_prev[1] !== MEM_Data_expected_prev[1] )
		&& ((MEM_Data_expected_prev[1] !== last_MEM_Data_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_Data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_Data_expected_prev);
		$display ("     Real value = %b", MEM_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MEM_Data_exp[1] = MEM_Data_expected_prev[1];
	end
	if (
		( MEM_Data_expected_prev[2] !== 1'bx ) && ( MEM_Data_prev[2] !== MEM_Data_expected_prev[2] )
		&& ((MEM_Data_expected_prev[2] !== last_MEM_Data_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_Data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_Data_expected_prev);
		$display ("     Real value = %b", MEM_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MEM_Data_exp[2] = MEM_Data_expected_prev[2];
	end
	if (
		( MEM_Data_expected_prev[3] !== 1'bx ) && ( MEM_Data_prev[3] !== MEM_Data_expected_prev[3] )
		&& ((MEM_Data_expected_prev[3] !== last_MEM_Data_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MEM_Data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MEM_Data_expected_prev);
		$display ("     Real value = %b", MEM_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_MEM_Data_exp[3] = MEM_Data_expected_prev[3];
	end
	if (
		( OUT_REG_expected_prev[0] !== 1'bx ) && ( OUT_REG_prev[0] !== OUT_REG_expected_prev[0] )
		&& ((OUT_REG_expected_prev[0] !== last_OUT_REG_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_REG_exp[0] = OUT_REG_expected_prev[0];
	end
	if (
		( OUT_REG_expected_prev[1] !== 1'bx ) && ( OUT_REG_prev[1] !== OUT_REG_expected_prev[1] )
		&& ((OUT_REG_expected_prev[1] !== last_OUT_REG_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_REG_exp[1] = OUT_REG_expected_prev[1];
	end
	if (
		( OUT_REG_expected_prev[2] !== 1'bx ) && ( OUT_REG_prev[2] !== OUT_REG_expected_prev[2] )
		&& ((OUT_REG_expected_prev[2] !== last_OUT_REG_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_REG_exp[2] = OUT_REG_expected_prev[2];
	end
	if (
		( OUT_REG_expected_prev[3] !== 1'bx ) && ( OUT_REG_prev[3] !== OUT_REG_expected_prev[3] )
		&& ((OUT_REG_expected_prev[3] !== last_OUT_REG_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_OUT_REG_exp[3] = OUT_REG_expected_prev[3];
	end
	if (
		( OVFLW_expected_prev !== 1'bx ) && ( OVFLW_prev !== OVFLW_expected_prev )
		&& ((OVFLW_expected_prev !== last_OVFLW_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OVFLW :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OVFLW_expected_prev);
		$display ("     Real value = %b", OVFLW_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_OVFLW_exp = OVFLW_expected_prev;
	end
	if (
		( R0_OUT_expected_prev[0] !== 1'bx ) && ( R0_OUT_prev[0] !== R0_OUT_expected_prev[0] )
		&& ((R0_OUT_expected_prev[0] !== last_R0_OUT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_OUT_exp[0] = R0_OUT_expected_prev[0];
	end
	if (
		( R0_OUT_expected_prev[1] !== 1'bx ) && ( R0_OUT_prev[1] !== R0_OUT_expected_prev[1] )
		&& ((R0_OUT_expected_prev[1] !== last_R0_OUT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_OUT_exp[1] = R0_OUT_expected_prev[1];
	end
	if (
		( R0_OUT_expected_prev[2] !== 1'bx ) && ( R0_OUT_prev[2] !== R0_OUT_expected_prev[2] )
		&& ((R0_OUT_expected_prev[2] !== last_R0_OUT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_OUT_exp[2] = R0_OUT_expected_prev[2];
	end
	if (
		( R0_OUT_expected_prev[3] !== 1'bx ) && ( R0_OUT_prev[3] !== R0_OUT_expected_prev[3] )
		&& ((R0_OUT_expected_prev[3] !== last_R0_OUT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_OUT_expected_prev);
		$display ("     Real value = %b", R0_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_R0_OUT_exp[3] = R0_OUT_expected_prev[3];
	end
	if (
		( R1_OUT_expected_prev[0] !== 1'bx ) && ( R1_OUT_prev[0] !== R1_OUT_expected_prev[0] )
		&& ((R1_OUT_expected_prev[0] !== last_R1_OUT_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_OUT_exp[0] = R1_OUT_expected_prev[0];
	end
	if (
		( R1_OUT_expected_prev[1] !== 1'bx ) && ( R1_OUT_prev[1] !== R1_OUT_expected_prev[1] )
		&& ((R1_OUT_expected_prev[1] !== last_R1_OUT_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_OUT_exp[1] = R1_OUT_expected_prev[1];
	end
	if (
		( R1_OUT_expected_prev[2] !== 1'bx ) && ( R1_OUT_prev[2] !== R1_OUT_expected_prev[2] )
		&& ((R1_OUT_expected_prev[2] !== last_R1_OUT_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_OUT_exp[2] = R1_OUT_expected_prev[2];
	end
	if (
		( R1_OUT_expected_prev[3] !== 1'bx ) && ( R1_OUT_prev[3] !== R1_OUT_expected_prev[3] )
		&& ((R1_OUT_expected_prev[3] !== last_R1_OUT_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_OUT_expected_prev);
		$display ("     Real value = %b", R1_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_R1_OUT_exp[3] = R1_OUT_expected_prev[3];
	end
	if (
		( R2_OUT_expected_prev[0] !== 1'bx ) && ( R2_OUT_prev[0] !== R2_OUT_expected_prev[0] )
		&& ((R2_OUT_expected_prev[0] !== last_R2_OUT_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_OUT_exp[0] = R2_OUT_expected_prev[0];
	end
	if (
		( R2_OUT_expected_prev[1] !== 1'bx ) && ( R2_OUT_prev[1] !== R2_OUT_expected_prev[1] )
		&& ((R2_OUT_expected_prev[1] !== last_R2_OUT_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_OUT_exp[1] = R2_OUT_expected_prev[1];
	end
	if (
		( R2_OUT_expected_prev[2] !== 1'bx ) && ( R2_OUT_prev[2] !== R2_OUT_expected_prev[2] )
		&& ((R2_OUT_expected_prev[2] !== last_R2_OUT_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_OUT_exp[2] = R2_OUT_expected_prev[2];
	end
	if (
		( R2_OUT_expected_prev[3] !== 1'bx ) && ( R2_OUT_prev[3] !== R2_OUT_expected_prev[3] )
		&& ((R2_OUT_expected_prev[3] !== last_R2_OUT_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_OUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_OUT_expected_prev);
		$display ("     Real value = %b", R2_OUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_R2_OUT_exp[3] = R2_OUT_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$stop;
end 
endmodule

module 2018510033_osman_taha_gunes_newBUS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg [3:0] OP_CODE;
reg Q;
reg [1:0] Rd;
reg [3:0] S1S2;
reg T2;
reg T3;
// wires                                               
wire [3:0] ADR_OUT;
wire [3:0] Data;
wire [3:0] INPT_REG;
wire [3:0] MEM_Data;
wire [3:0] OUT_REG;
wire OVFLW;
wire [3:0] R0_OUT;
wire [3:0] R1_OUT;
wire [3:0] R2_OUT;

wire sampler;                             

// assign statements (if any)                          
2018510033_osman_taha_gunes_newBUS i1 (
// port map - connection between master ports and signals/registers   
	.ADR_OUT(ADR_OUT),
	.Clk(Clk),
	.Data(Data),
	.INPT_REG(INPT_REG),
	.MEM_Data(MEM_Data),
	.OP_CODE(OP_CODE),
	.OUT_REG(OUT_REG),
	.OVFLW(OVFLW),
	.Q(Q),
	.R0_OUT(R0_OUT),
	.R1_OUT(R1_OUT),
	.R2_OUT(R2_OUT),
	.Rd(Rd),
	.S1S2(S1S2),
	.T2(T2),
	.T3(T3)
);

// Clk
initial
begin
	repeat(62)
	begin
		Clk = 1'b0;
		Clk = #8000 1'b1;
		# 8000;
	end
	Clk = 1'b0;
end 
// OP_CODE[ 3 ]
initial
begin
	OP_CODE[3] = 1'b0;
end 
// OP_CODE[ 2 ]
initial
begin
	OP_CODE[2] = 1'b0;
end 
// OP_CODE[ 1 ]
initial
begin
	OP_CODE[1] = 1'b0;
end 
// OP_CODE[ 0 ]
initial
begin
	OP_CODE[0] = 1'b0;
end 

// Q
initial
begin
	Q = 1'b0;
end 
// Rd[ 1 ]
initial
begin
	Rd[1] = 1'b0;
end 
// Rd[ 0 ]
initial
begin
	Rd[0] = 1'b0;
end 
// S1S2[ 3 ]
initial
begin
	S1S2[3] = 1'b0;
end 
// S1S2[ 2 ]
initial
begin
	S1S2[2] = 1'b0;
end 
// S1S2[ 1 ]
initial
begin
	S1S2[1] = 1'b0;
end 
// S1S2[ 0 ]
initial
begin
	S1S2[0] = 1'b0;
end 

// T2
initial
begin
	T2 = 1'b0;
end 

// T3
initial
begin
	T3 = 1'b0;
end 

2018510033_osman_taha_gunes_newBUS_vlg_sample_tst tb_sample (
	.Clk(Clk),
	.OP_CODE(OP_CODE),
	.Q(Q),
	.Rd(Rd),
	.S1S2(S1S2),
	.T2(T2),
	.T3(T3),
	.sampler_tx(sampler)
);

2018510033_osman_taha_gunes_newBUS_vlg_check_tst tb_out(
	.ADR_OUT(ADR_OUT),
	.Data(Data),
	.INPT_REG(INPT_REG),
	.MEM_Data(MEM_Data),
	.OUT_REG(OUT_REG),
	.OVFLW(OVFLW),
	.R0_OUT(R0_OUT),
	.R1_OUT(R1_OUT),
	.R2_OUT(R2_OUT),
	.sampler_rx(sampler)
);
endmodule

